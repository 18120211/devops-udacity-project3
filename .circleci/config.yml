version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  install-package:
    description: Install AWS cli and Ansible
    steps:
      - run:
          name: Install additional package
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
            sudo apt-get install -y ansible
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --force
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl https://kvdb.io/8aiK3uxruXiWnYN59SsJ9i/SUCCESS)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
          channel: C03DF2RGQJC
          custom: |
            {
              "blocks": [{
                "type": "section",
                "fields": [{
                  "type": "plain_text",
                  "text": "Frontend FAIL build in ${CIRCLE_BUILD_NUM} of ${CIRCLE_PROJECT_REPONAME} (${CIRCLE_BRANCH}) -${CIRCLE_PR_USERNAME}: Fail at ${CIRCLE_SHA1}"
                }]
              }] 
            }
      - slack/notify:
          event: pass
          channel: C03DF2RGQJC
          custom: |
            {
              "blocks": [{
                "type": "section",
                "fields": [{
                  "type": "plain_text",
                  "text": "Frontend SUCCESS build in ${CIRCLE_BUILD_NUM} of ${CIRCLE_PROJECT_REPONAME} (${CIRCLE_BRANCH}) -${CIRCLE_PR_USERNAME}: Fixed at ${CIRCLE_SHA1}"
                }]
              }] 
            }
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: fail
          channel: C03DF2RGQJC
          custom: |
            {
              "blocks": [{
                "type": "section",
                "fields": [{
                  "type": "plain_text",
                  "text": "Backend FAIL build in ${CIRCLE_BUILD_NUM} of ${CIRCLE_PROJECT_REPONAME} (${CIRCLE_BRANCH}) -${CIRCLE_PR_USERNAME}: Fail at ${CIRCLE_SHA1}"
                }]
              }] 
            }
      - slack/notify:
          event: pass
          channel: C03DF2RGQJC
          custom: |
            {
              "blocks": [{
                "type": "section",
                "fields": [{
                  "type": "plain_text",
                  "text": "Backend SUCCESS build in ${CIRCLE_BUILD_NUM} of ${CIRCLE_PROJECT_REPONAME} (${CIRCLE_BRANCH}) -${CIRCLE_PR_USERNAME}: Fixed at ${CIRCLE_SHA1}"
                }]
              }] 
            }
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      # - image: cimg/base:stable-22.04
      - image: 18120211/aws-ansible-22.04:latest
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-project3 \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-project3 \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --query 'Reservations[*].Instances[0].PublicIpAddress' --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: 18120211/aws-ansible-22.04
    steps:
      # Checkout code from git
      - checkout
      # Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Check inventory
          command: cat ~/inventory.txt
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "36:c6:1e:19:7a:d4:77:2e:56:cc:11:6b:92:07:be:52"
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: 18120211/node-aws-ansible-22.04
    steps:
      # Checkout code from git
      - checkout
      # Restore cache backend build
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations > migrations-result.txt
      - run:
          name: Send migration results to KVDB
          command: |
            # Your code here
            cat backend/migrations-result.txt
            if grep -q "has been executed successfully." backend/migrations-result.txt
            then
              curl https://kvdb.io/8aiK3uxruXiWnYN59SsJ9i/SUCCESS -d 1
            else
              curl https://kvdb.io/8aiK3uxruXiWnYN59SsJ9i/SUCCESS -d 0
            fi
     # Here's where you will add some code to rollback on failure      
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: 18120211/node-aws-ansible-22.04
    steps:
      # Checkout code from git
      - checkout
      # Restore cache frontend
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
             --query 'Reservations[*].Instances[0].PublicIpAddress' --output text)
            export API_URL=${BACKEND_URL}:3030
            echo "API_URL=${BACKEND_URL}:3030" > frontend/.env
            cat frontend/.env
            echo "-------------------Front end URL--------------------"
            echo "https://udapeople-${CIRCLE_WORKFLOW_ID}.s3.amazonaws.com/index.html"
            echo "https://udapeople-${CIRCLE_WORKFLOW_ID}.s3.amazonaws.com/index.html" > screenshots-urls/URL02.txt
      - run:
          name: Deploy frontend objects
          command: |
            echo "--------------------log 1----------------------"
            pwd
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: 18120211/node-aws-ansible-22.04
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "36:c6:1e:19:7a:d4:77:2e:56:cc:11:6b:92:07:be:52"
      # attach workspace
      - attach_workspace:
          at: ~/
      # Restore cache backend build
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            # echo "[web]" > ~/inventory.txt
            # echo "54.197.202.249" >> ~/inventory.txt
            echo "--------------------inventory data----------------------"
            cat ~/inventory.txt
            cd backend
            npm install
            npm run build
            cd ../
            tar -czvf backend.tar.gz backend
            ls /root/project
            ansible-playbook -i ~/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: 18120211/aws-ansible-22.04
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_URL=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --query 'Reservations[*].Instances[0].PublicIpAddress' --output text):3030/api/status
            echo "-------------------- Backend url ------------------------"
            echo $BACKEND_URL
            if curl $BACKEND_URL | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/index.html"
            echo "-------------------- Frontend url ------------------------"
            echo $FRONTEND_URL
            if curl $FRONTEND_URL | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: 18120211/aws-ansible-22.04
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            echo "--------------------- Get OLD workflow id ----------------------"
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/old_workflow_id.txt
            cat ~/old_workflow_id.txt
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udacity-project3 \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}
      - persist_to_workspace:
          root: ~/
          paths: old_workflow_id.txt

      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      # Docker image here
      - image: 18120211/aws-ansible-22.04
    steps:
      # Checkout code from git
      - checkout
      # Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            echo "--------------------- OLD workflow id ----------------------"
            export OldWorkflowID=$(cat ~/old_workflow_id.txt)
            echo ${OldWorkflowID}
            echo "--------------------- CURRENT workflow id ------------------"
            echo ${CIRCLE_WORKFLOW_ID}

            if [[ "${CIRCLE_WORKFLOW_ID}" != "${OldWorkflowID}" ]]
            then
              echo "---------- OH YEAH -----------"
              aws s3 rb "s3://udapeople-${OldWorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend:
          context: my-context
      - build-backend:
          context: my-context
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      